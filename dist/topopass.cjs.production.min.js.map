{"version":3,"file":"topopass.cjs.production.min.js","sources":["../src/contanst.ts","../src/modules/wallet/auth.ts","../src/modules/wallet/address.ts","../src/modules/wallet/wallet.ts","../src/modules/wallet/network.ts"],"sourcesContent":["export const LOCAL_STORAGE = {\r\n  TOPOPASS_ACCOUNT_HASH: 'topopass_account_hash',\r\n  CONTACTS: 'contacts',\r\n}\r\n\r\nexport type RESPONSE_AUTH_WALLET = {\r\n  phrase: string;\r\n  path: string;\r\n  locale: string;\r\n}\r\n\r\nexport type RESPONSE_GLOBAL = {\r\n  message: string;\r\n  data: any;\r\n}\r\n\r\nexport type RESPONSE_ACTION_AUTH = {\r\n  message: string;\r\n  data: any;\r\n}\r\n\r\nexport type CONTACT = {\r\n  address: string;\r\n  name: string;\r\n  avatar: string;\r\n  space: string;\r\n}\r\n\r\nexport type RESPONSE_CONTACT = {\r\n  message: string;\r\n  data: any;\r\n}\r\n\r\n","import {\r\n  LOCAL_STORAGE,\r\n  RESPONSE_AUTH_WALLET,\r\n  RESPONSE_ACTION_AUTH\r\n} from '../../contanst'\r\nimport CryptoJS from 'crypto-js'\r\n\r\nexport class AUTH_TOPO {\r\n  hash: string;\r\n\r\n  constructor (hash: string) {\r\n    this.hash = hash\r\n  }\r\n\r\n  CHECK_AUTH (password: string): Promise<RESPONSE_AUTH_WALLET> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        let ciphertext = localStorage.getItem(LOCAL_STORAGE.TOPOPASS_ACCOUNT_HASH) || 'U2FsdGVkX1/ARVszYy1NEMVLZuEL0fAquTwNDNk6ldIFZEQZzAw++j4hXKmlYwyUJq8wqbwLJ8wTFTs7k8hhACzPL+VpDRxCGTjMlFqiIERewE9fvP1x084OwTrMtXY+8415r0r/voO9txioKr2uHyACq+n7XTV2F3fruXBUiirkf7Gox0DYPEKZ6oiIz7QNkh9kOOZ10ESw4EuSppXFDg=='\r\n        let decryptData = CryptoJS.AES.decrypt(\r\n          ciphertext,\r\n          password\r\n        ).toString(CryptoJS.enc.Utf8);\r\n\r\n        if (decryptData) {\r\n          const result = typeof decryptData === 'string' ? JSON.parse(decryptData) : decryptData\r\n          resolve(result)\r\n        } else reject({\r\n          phrase: null,\r\n          path: \"\",\r\n          locale: \"en\"\r\n        })\r\n      } catch (error) {\r\n        reject(error)\r\n      }\r\n    })\r\n  }\r\n\r\n  SET_AUTH (mnemonic: string, password: string): Promise<RESPONSE_ACTION_AUTH> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        var ciphertext = CryptoJS.AES.encrypt(mnemonic, password).toString();\r\n        localStorage.setItem(LOCAL_STORAGE.TOPOPASS_ACCOUNT_HASH, ciphertext)\r\n        this.hash = ciphertext\r\n        resolve({\r\n          message: 'Create auth success!',\r\n          data: ciphertext,\r\n        })\r\n      } catch (error) {\r\n        reject({\r\n          message: 'Failed create auth!',\r\n          data: error,\r\n        })\r\n      }\r\n    })\r\n  }\r\n}","import { utils } from 'ethers'\r\nimport { CONTACT, LOCAL_STORAGE, RESPONSE_CONTACT } from '../../contanst'\r\n\r\nexport class ADDRESS_WALLET {\r\n  address: string;\r\n\r\n  constructor (address: string) {\r\n    this.address = address\r\n  }\r\n\r\n  CHECK_ADDRESS (address: string): boolean {\r\n    return utils.isAddress(address)\r\n  }\r\n\r\n  SET_CONTACT (address: string, name: string): Promise<RESPONSE_CONTACT> {\r\n    return new Promise((resolve, reject) => {\r\n      if (this.CHECK_ADDRESS(address)) {\r\n        let contacts : CONTACT[] | undefined;\r\n        if (localStorage.getItem(LOCAL_STORAGE.CONTACTS)) contacts = JSON.parse(localStorage.getItem('contacts') || '[]')\r\n\r\n        if (contacts !== undefined) contacts.push({address, name, space: '', avatar: ''})\r\n        else contacts = [{address, name, space: '', avatar: ''}]\r\n\r\n        resolve({\r\n          message: 'Save contact success',\r\n          data: {address, name, space: '', avatar: ''}\r\n        })\r\n      } else {\r\n        reject({\r\n          message: 'Address not is validate!!',\r\n          data: ''\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  GET_LIST_CONTACT (): Promise<RESPONSE_CONTACT> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        let contacts: CONTACT[] | undefined;\r\n      \r\n        if(localStorage.getItem(LOCAL_STORAGE.CONTACTS)) contacts = JSON.parse(localStorage.getItem(LOCAL_STORAGE.CONTACTS) || '[]')\r\n\r\n        resolve({\r\n          message: 'Get list contact',\r\n          data: contacts\r\n        })\r\n      } catch (error) {\r\n        reject({\r\n          message: 'GET failed list contact',\r\n          data: error\r\n        })\r\n      }\r\n    })\r\n  }\r\n}\r\n","import { NETWORK_TOPO } from \"./network\";\r\nimport { randomBytes } from \"@ethersproject/random\";\r\nimport { entropyToMnemonic } from \"@ethersproject/hdnode\";\r\nimport { AUTH_TOPO } from \"./auth\"; \r\nimport { ADDRESS_WALLET } from \"./address\";\r\nimport {\r\n  utils,\r\n  Wallet\r\n} from 'ethers'\r\nimport {\r\n  RESPONSE_ACTION_AUTH,\r\n  RESPONSE_GLOBAL\r\n} from '../../contanst'\r\n\r\nexport class WALLET_TOPO {\r\n  network: NETWORK_TOPO;\r\n  auth: AUTH_TOPO\r\n  address: ADDRESS_WALLET;\r\n  wallet: any;\r\n  walletMnemonic: any;\r\n  password: string;\r\n\r\n  constructor (network: NETWORK_TOPO) {\r\n    this.network = network\r\n    this.auth = new AUTH_TOPO('')\r\n    this.address = new ADDRESS_WALLET('')\r\n    this.wallet = null\r\n    this.password = ''\r\n  }\r\n\r\n  LOGIN_TOPO (password: string): Promise<boolean> {\r\n    return new Promise(async (resolve, reject) => {\r\n      await this.auth.CHECK_AUTH(password)\r\n      .then(async (res) => {\r\n        this.walletMnemonic = await Wallet.fromMnemonic(res.phrase, res.path)\r\n        this.wallet = this.walletMnemonic.connect(this.network.rpc)\r\n        this.password = password\r\n        resolve(true)\r\n      }).\r\n      catch(() => {\r\n        reject(false)\r\n      })\r\n    })\r\n  }\r\n\r\n  CREATE_SEED_PHRASE (options: any) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        if (!options) { options = { }; }\r\n        const entropy = randomBytes(16)\r\n        const mnemonic = entropyToMnemonic(entropy, options.locale);\r\n\r\n        if (mnemonic) resolve(mnemonic)\r\n        else reject(mnemonic)\r\n      } catch (error) {\r\n        reject(error)\r\n      }\r\n    })\r\n  }\r\n\r\n  IMPORT_SEED_PHRASE (seedPhrase: string, options: any, password: string): Promise<RESPONSE_ACTION_AUTH> {\r\n    return new Promise(async (resolve, reject) => {\r\n      if (!options) { options = { }; }\r\n      const wallet = await Wallet.fromMnemonic(seedPhrase, options.path, options.locale)\r\n      this.auth.SET_AUTH(JSON.stringify(wallet.mnemonic), password)\r\n        .then((res) => {\r\n          this.wallet = wallet;\r\n          resolve(res)\r\n        })\r\n        .catch((err) => {\r\n          reject(err)\r\n        })\r\n    })\r\n  }\r\n\r\n  async GET_BALANCE_TOPO() {\r\n    const balance = await this.wallet.getBalance();\r\n    console.log('GET_BALANCE_TOPO', balance)\r\n    return balance\r\n  }\r\n\r\n\r\n  SEND_TRANSACTION (to: string, amount: string, gasLimit: number): Promise<RESPONSE_GLOBAL> {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const tx = {\r\n          from: this.walletMnemonic.address,\r\n          to,\r\n          value: utils.parseEther(amount),\r\n          gasLimit: utils.hexlify(gasLimit)\r\n        }\r\n        if(this.wallet) {\r\n          const data = await this.wallet.sendTransaction(tx)\r\n          resolve({\r\n            message: 'sendTransaction',\r\n            data: data\r\n          })\r\n        }\r\n        else {\r\n          reject({\r\n            message: `address ${to} is not validate!`,\r\n            data: ''\r\n          })\r\n        } \r\n      } catch (error) {\r\n        \r\n      }\r\n      \r\n    })\r\n  }\r\n\r\n  GET_LIST_CONTRACT (): Promise<RESPONSE_GLOBAL> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        resolve({\r\n          message: '',\r\n          data: []\r\n        })\r\n      } catch (error) {\r\n        reject({\r\n          message: '',\r\n          data: error\r\n        })\r\n      }\r\n    })\r\n  }\r\n}\r\n","import { JsonRpcProvider } from \"@ethersproject/providers\"\r\nimport { ethers } from 'ethers'\r\n\r\nexport class NETWORK_TOPO {\r\n  network: string;\r\n  name: string;\r\n  rpc: JsonRpcProvider;\r\n  provider: any;\r\n\r\n\r\n  constructor (network: string, name: string) {\r\n    this.network = network;\r\n    this.name = name;\r\n    this.rpc = new JsonRpcProvider(network)\r\n    this.provider = new ethers.providers.JsonRpcProvider(network)\r\n  }\r\n}\r\n"],"names":["AUTH_TOPO","hash","this","_proto","CHECK_AUTH","password","Promise","resolve","reject","ciphertext","localStorage","getItem","decryptData","CryptoJS","AES","decrypt","toString","enc","Utf8","JSON","parse","phrase","path","locale","error","SET_AUTH","mnemonic","encrypt","setItem","_this","message","data","ADDRESS_WALLET","address","CHECK_ADDRESS","utils","isAddress","SET_CONTACT","name","contacts","undefined","push","space","avatar","GET_LIST_CONTACT","WALLET_TOPO","network","auth","wallet","LOGIN_TOPO","_context2","then","res","_context","Wallet","fromMnemonic","walletMnemonic","connect","rpc","CREATE_SEED_PHRASE","options","entropy","randomBytes","entropyToMnemonic","IMPORT_SEED_PHRASE","seedPhrase","_context4","_this2","stringify","err","GET_BALANCE_TOPO","_context5","getBalance","balance","console","log","SEND_TRANSACTION","to","amount","gasLimit","_context6","tx","from","_this3","value","parseEther","hexlify","sendTransaction","GET_LIST_CONTRACT","JsonRpcProvider","provider","ethers","providers"],"mappings":"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"}